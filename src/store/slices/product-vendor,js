import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axiosClient from '../../api/axiosClient';

export const fetchProducts = createAsyncThunk(
  'products/fetchProducts',
  async ({ currentPage, pageSize, searchText, orderBy }) => {
    const response = await axiosClient.get(
      `/products/pagination?skip=${
        currentPage * pageSize
      }&limit=${pageSize}&orderBy=${orderBy}&displayName%7B%7Bsearch%7D%7D=${searchText}`
    );
    console.log(response);

    return response;
  }
);

export const deleteProduct = createAsyncThunk('products/deleteProduct', async (id) => {
  await axiosClient.delete(`/products/${id}`);
  return id;
});

export const updateProduct = createAsyncThunk('products/updateProduct', async (product) => {
  const response = await axiosClient.patch(`/products/${product.Id}`, product, {
    headers: {
      accept: 'application/json',
      'Content-Type': 'application/json',
    },
  });
  return response;
});

export const updateQuantity = createAsyncThunk('products/update-quantity', async ({ id, quantity }) => {
  const response = await axiosClient.patch(
    `/products/${id}/update-quantity`,
    { quantity },
    {
      headers: {
        accept: 'application/json',
        'Content-Type': 'application/json',
      },
    }
  );
  return response;
});

export const updateStatus = createAsyncThunk('products/update-quantity', async ({ id, status }) => {
  const response = await axiosClient.patch(`/products/${id}/update-status?$status=${status}`, {
    headers: {
      accept: 'application/json',
      'Content-Type': 'application/json',
    },
  });
  return response;
});

export const addProduct = createAsyncThunk('products/addProduct', async (product) => {
  const response = await axiosClient.post('/products', product, {
    headers: {
      'Content-Type': 'application/json',
    },
  });
  return response;
});

export const productsSlice = createSlice({
  name: 'products',
  initialState: {
    data: [],
    pagination: 0,
    loading: false,
    error: null,
  },

  extraReducers: (builder) => {
    builder
      .addCase(addProduct.fulfilled, (state, action) => {
        state.data = action.payload;
      })
      .addCase(updateQuantity.fulfilled, (state, action) => {
        state.data = action.payload;
      })
      .addCase(updateStatus.pending, (state, action) => {
        const index = state.data.findIndex((product) => product.Id === action.payload.Id);
        state.data[index] = action.payload;
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload.data;
        state.pagination = action.payload.pagination;
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })
      .addCase(deleteProduct.fulfilled, (state, action) => {
        state.data = state.data.filter((product) => product.Id !== action.payload);
      })
      .addCase(updateProduct.fulfilled, (state, action) => {
        const index = state.data.findIndex((product) => product.Id === action.payload.Id);
        state.data[index] = action.payload;
      });
  },
});

export const selectProducts = (state) => state.products;
export default productsSlice.reducer;
